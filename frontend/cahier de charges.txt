But final : 
Créer une application qui permet d'apparier les objets de la Base Adresse Nationale (BAN) et ceux de la BdUni de l'IGN, afin de mettre à jour les odonymes de la BdUni. Une fois l'appariement effectué, une alerte est générée pour informer un opérateur qu'une mise à jour est nécessaire.

Les différentes fonctionnalités qui m'ont été demandées :
- création de la map
- Affichage des adresses de la ban à l'aide de l'API
- Affichage du routier de la BDTopo
- Affichage des informations des objets de la ban et de la BDTOPO
- Faire de l'appariement géométrique entre les objets de la ban et de la BDTOPO

Voici comment je compte procéder :
- Utilisez Mapbox GL JS pour afficher la carte, les adresses de la BAN et les données de la BD Topo.
- Pour l'appariement géométrique, faire une API avec Flask qui effectuera les calculs géospatiaux côté serveur. Cette API prendra en entrée les coordonnées de l'adresse sélectionnée et renverra les résultats de l'appariement géométrique (par exemple, les adresses correspondantes dans la même rue ou les objets BD Topo les plus proches).
- Dans l'application front-end, envoyer une requête à l'API créée lorsqu'un utilisateur interagit avec la carte (par exemple, en cliquant sur une adresse). 
- Utiliser les résultats renvoyés par l'API pour mettre à jour la carte et afficher les informations pertinentes.

Utilisation des technologies :
- L'utilisation de javascript avec Mapbox en front pour aficher les données géospatiales
- L'utilisation de Python en back pour effectuer des traitements géographiques complexes

- Création d'une api en Flask :
    - Routes :
        - Méthode : get - /liste_communes : récupère la liste des communes



Le but de mon application est de créer une application qui permet d'apparier les objets de la Base Adresse Nationale (BAN) et ceux de la BdUni de l'IGN, afin de mettre à jour les odonymes de la BdUni. Une fois l'appariement effectué, une alerte est générée pour informer un opérateur qu'une mise à jour est nécessaire. Le front se fait avec javascript, mapbox gl js et vite js. Le back avec python et flask.
J'utilise une base de données interne de l'IGN appelé bd_uni_france_consultation pour intéragir avec les données dont j'ai besoin. Cette base de données contient également les adresses de la ban.

SRID est l'acronyme de "Spatial Reference System Identifier" (Identifiant du Système de Référence Spatial). C'est une référence unique à un système de coordonnées spatiales particulier, à une tolérance de résolution spatiale particulière, et à une tolérance de résolution spatiale particulière.

En d'autres termes, le SRID est utilisé pour identifier le système de coordonnées et les autres informations spatiales pertinentes pour une géométrie dans une base de données spatiale. Chaque géométrie stockée dans une base de données spatiale a un SRID associé pour indiquer le système de coordonnées dans lequel elle est définie.

Par exemple, le SRID 4326 est utilisé pour le système de coordonnées géographiques WGS 84, qui est couramment utilisé pour les données GPS. Le SRID 2154 est utilisé pour le système de coordonnées projetées Lambert 93, qui est couramment utilisé pour les données géospatiales en France.

Lorsque vous transformez des géométries d'un système de coordonnées à un autre (comme de Lambert 93 à WGS 84), vous devez indiquer le SRID d'origine et le SRID de destination pour que la transformation puisse être effectuée correctement.


Appariement spatial : Pour chaque adresse, trouvez le tronçon de route le plus proche. Cela peut être fait en calculant la distance entre chaque adresse et chaque tronçon de route, puis en sélectionnant le tronçon de route avec la distance la plus courte. Cela peut être réalisé en utilisant une fonction de distance comme celle que j'ai mentionnée dans ma précédente réponse. Cette étape peut être coûteuse en temps de calcul si vous avez beaucoup d'adresses et de tronçons de route.

Regroupement par nom de route : Une fois que chaque adresse est associée à un tronçon de route, vous pouvez regrouper les adresses par nom de route. Cela peut être fait en utilisant une fonction de groupement dans votre système de gestion de base de données. Par exemple, en SQL, vous pourriez utiliser la clause GROUP BY.

comment se fait l'appariement :
La distance entre une adresse (point) et un tronçon de route (ligne) peut être calculée en utilisant une fonction de distance géométrique. 
Dans le cas de PostgreSQL avec l'extension PostGIS, l'on peut utiliser la fonction ST_Distance.
La fonction ST_Distance prend deux géométries en entrée et retourne la distance minimale entre elles. 
L'on peut utiliser cette fonction pour calculer la distance entre chaque adresse et chaque tronçon de route.

requête sql pour l'appariement : 
WITH distances AS (
    SELECT a.cleabs AS adresse_id, a.numero AS numero_adresse, t.nom_1_gauche AS nom_voie_gauche, v.nom_initial_troncon, t.nom_1_droite AS nom_voie_droite, a.nom_commune, a.suffixe, a.insee_commune, a.nom_voie AS nom_voie_adresse_ban, t.cleabs AS troncon_id, ST_Distance(a.geometrie, t.geometrie) AS distance
    FROM adresse_ban a
    JOIN troncon_de_route t
    ON a.insee_commune = t.insee_commune_gauche OR a.insee_commune = t.insee_commune_droite
    JOIN voie v
    ON v.id_pseudo_fpb = t.identifiant_voie_1_gauche OR v.id_pseudo_fpb = t.identifiant_voie_1_droite
    WHERE a.insee_commune = '94067' AND a.nom_voie='Avenue Pasteur' AND a.gcms_detruit='false'
), min_distances AS (
       SELECT adresse_id, numero_adresse, nom_voie_adresse_ban, MIN(distance) AS min_distance, insee_commune, nom_commune
        FROM distances
        GROUP BY adresse_id, numero_adresse, nom_voie_adresse_ban, insee_commune, nom_commune, suffixe
)
SELECT distances.adresse_id, distances.numero_adresse, distances.suffixe, distances.nom_voie_adresse_ban, distances.nom_commune, distances.nom_initial_troncon, distances.nom_voie_droite, distances.nom_voie_gauche, distances.insee_commune, distances.troncon_id, distances.distance
FROM distances
JOIN min_distances
ON distances.insee_commune = min_distances.insee_commune
AND distances.numero_adresse = min_distances.numero_adresse
AND distances.distance = min_distances.min_distance;

Explication de l'appariement en détail:
On commence par calculer la distance entre chaque adresse et chaque tronçon de route dans la même commune. Ces résultats sont stockés dans une table temporaire appelée "distances".

Ensuite, pour chaque adresse, on cherche la distance minimale parmi toutes les distances calculées à l'étape précédente. Ces résultats sont stockés dans une autre table temporaire appelée "min_distances".

Enfin, on joint les deux tables temporaires pour obtenir le tronçon le plus proche (c'est-à-dire le tronçon ayant la distance minimale) pour chaque adresse.

L'objectif final de cette requête est d'identifier le tronçon le plus proche pour chaque adresse dans une commune donnée.